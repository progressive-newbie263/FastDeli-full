'use client';

import { useEffect, useState, useRef } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import FoodCategories, {Category} from '../components/FoodCategories';
import { TiTick } from "react-icons/ti";

const Home = () => {
  // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
  const isLoggedIn = typeof window !== 'undefined' && localStorage.getItem('token') !== null;
  const userData = typeof window !== 'undefined' ? JSON.parse(localStorage.getItem('userData') || '{}') : {};
  const [categories, setCategories] = useState<Category[]>([]);
  const [currentAddress, setCurrentAddress] = useState<string>('');

  // H√†m chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô th√†nh ƒë·ªãa ch·ªâ
  const getAddressFromCoordinates = async (latitude: number, longitude: number) => {
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&accept-language=vi`
      );
      const data = await response.json();
      
      if (data && data.display_name) {
        return data.display_name;
      }
      return `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`;
    } catch (error) {
      console.error('L·ªói khi l·∫•y ƒë·ªãa ch·ªâ:', error);
      return `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`;
    }
  };


  // H√†m xin quy·ªÅn v√† l·∫•y v·ªã tr√≠
  // t·∫°m th·ªùi ch∆∞a d√πng t·ªõi.
  const requestLocationPermission = () => {
    if (!navigator.geolocation) {
      alert('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ geolocation');
      return;
    }

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const { latitude, longitude } = position.coords;
        
        // Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô th√†nh ƒë·ªãa ch·ªâ
        const address = await getAddressFromCoordinates(latitude, longitude);
        
        // L∆∞u v√†o localStorage
        const locationData = {
          latitude,
          longitude,
          address,
          timestamp: Date.now()
        };
        
        localStorage.setItem('userLocation', JSON.stringify(locationData));
        setCurrentAddress(address);
        
        alert('ƒê√£ l∆∞u v·ªã tr√≠ c·ªßa b·∫°n th√†nh c√¥ng!');
      },
      (error) => {
        console.error('L·ªói khi l·∫•y v·ªã tr√≠:', error);
        
        let errorMessage = 'Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n';
        switch (error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = 'B·∫°n ƒë√£ t·ª´ ch·ªëi chia s·∫ª v·ªã tr√≠';
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = 'Th√¥ng tin v·ªã tr√≠ kh√¥ng kh·∫£ d·ª•ng';
            break;
          case error.TIMEOUT:
            errorMessage = 'H·∫øt th·ªùi gian ch·ªù l·∫•y v·ªã tr√≠';
            break;
        }
        
        alert(errorMessage);
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 300000 // 5 ph√∫t
      }
    );
  };


  // H√†m ƒëi·ªÅn ƒë·ªãa ch·ªâ hi·ªán t·∫°i v√†o input
  // ch·ªâ khi x√°c nh·∫≠n ng∆∞·ªùi d√πng ƒë√£ "allow" l·∫•y ƒë·ªãa ch·ªâ th√¨ m·ªõi ƒë∆∞·ª£c l·∫•y.
  const fillCurrentLocation = async () => {
    if (!navigator.geolocation) {
      alert('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã');
      return;
    }

    const askStatus = localStorage.getItem('locationPermissionAsked');

    // Tr∆∞·ªùng h·ª£p t·ª´ng b·ªã t·ª´ ch·ªëi th√¨ h·ªèi l·∫°i
    if (!askStatus || askStatus.startsWith('denied:')) {
      const agree = confirm('üìç FoodDeli mu·ªën s·ª≠ d·ª•ng v·ªã tr√≠ c·ªßa b·∫°n ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn ƒë·ªãa ch·ªâ. Cho ph√©p?');
      if (!agree) {
        localStorage.setItem('locationPermissionAsked', `denied:${Date.now()}`);
        return;
      }
    }

    // N·∫øu t·ªõi ƒë√¢y th√¨ ng∆∞·ªùi d√πng ƒë√£ ƒë·ªìng √Ω
    navigator.geolocation.getCurrentPosition(
      async (pos) => {
        const { latitude, longitude } = pos.coords;
        const address = await getAddressFromCoordinates(latitude, longitude);

        const input = document.getElementById('search-input') as HTMLInputElement;
        if (input) {
          input.value = address;
          setCurrentAddress(address);
        }

        const locationData = {
          latitude,
          longitude,
          address,
          timestamp: Date.now(),
        };

        localStorage.setItem('userLocation', JSON.stringify(locationData));
        localStorage.setItem('locationPermissionAsked', 'true');
        alert('üìç ƒê√£ c·∫≠p nh·∫≠t v·ªã tr√≠ hi·ªán t·∫°i!');
      },
      (error) => {
        console.error('L·ªói v·ªã tr√≠:', error);
        alert('Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ hi·ªán t·∫°i. C√≥ th·ªÉ b·∫°n ƒë√£ ch·∫∑n quy·ªÅn ho·∫∑c thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£.');
        localStorage.setItem('locationPermissionAsked', `denied:${Date.now()}`);
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 0,
      }
    );
  };



  // Ki·ªÉm tra khi component mount
  useEffect(() => {
    window.scrollTo(0, 0);
    document.title = 'FoodDeli - ƒê·∫∑t ƒë·ªì ƒÉn tr·ª±c tuy·∫øn';

    // Ki·ªÉm tra xem c√≥ v·ªã tr√≠ ƒë√£ l∆∞u kh√¥ng
    if (typeof window !== 'undefined') {
      const savedLocation = localStorage.getItem('userLocation');
      if (savedLocation) {
        const locationData = JSON.parse(savedLocation);
        setCurrentAddress(locationData.address);
      }
    }
  }, []);


  /* 
    Ki·ªÉm tra khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    - L·∫ßn ƒë·∫ßu ƒëƒÉng nh·∫≠p xong ho·∫∑c m·ªõi x√≥a c√°c value trong localStorage
    - S·∫Ω hi·ªÉn th·ªã tin nh·∫Øn h·ªèi "C√≥ cho ph√©p l·∫•y ƒë·ªãa ch·ªâ ng∆∞·ªùi d√πng?"
    - n·∫øu kh√¥ng cho / nh·∫•n cancel th√¨ th√¥i. S·∫Ω c√≥ 1 v√†i gi·ªõi h·∫°n ƒë∆∞·ª£c √°p ƒë·∫∑t l√™n
    - N·∫øu cho / nh·∫•n allow th√¨ localStorage s·∫Ω nh·∫≠n ƒë∆∞·ª£c 1 c√°i 'userPermission' l√† true
    ·ªü nh·ªØng l·∫ßn ƒëƒÉng nh·∫≠p ti·∫øp theo th√¨ c·ª© t·ª´ ƒë√≥ m√† tri·ªÉn. 
  */
  const hasRequestedLocation = useRef(false); // cho ph√©p ko b·ªã l·∫∑p l·∫°i alert 2 l·∫ßn (do b·ªã rerender)

  useEffect(() => {
    if (
      isLoggedIn &&
      typeof window !== 'undefined' &&
      !hasRequestedLocation.current // ki·ªÉm tra ref thay v√¨ bi·∫øn th∆∞·ªùng
    ) {
      const savedLocation = localStorage.getItem('userLocation');
      const askStatus = localStorage.getItem('locationPermissionAsked');

      if (!savedLocation) {
        let shouldAsk = false;

        // Ch∆∞a t·ª´ng h·ªèi
        if (!askStatus) {
          shouldAsk = true;
        }

        // ƒê√£ b·ªã t·ª´ ch·ªëi tr∆∞·ªõc ƒë√≥
        if (askStatus?.startsWith('denied:')) {
          const [, timestampStr] = askStatus.split(':');
          const deniedTime = parseInt(timestampStr, 10);
          const now = Date.now();
          const daysPassed = (now - deniedTime) / (1000 * 60 * 60 * 24);

          if (daysPassed >= 3) {
            shouldAsk = true;
          }
        }

        if (shouldAsk) {
          hasRequestedLocation.current = true; // ‚úÖ ch·ªâ ƒë√°nh d·∫•u 1 l·∫ßn

          setTimeout(() => {
            const agree = confirm('üìç FoodDeli mu·ªën s·ª≠ d·ª•ng v·ªã tr√≠ hi·ªán t·∫°i c·ªßa b·∫°n ƒë·ªÉ g·ª£i √Ω nh√† h√†ng g·∫ßn nh·∫•t. Cho ph√©p?');

            if (agree) {
              navigator.geolocation.getCurrentPosition(
                async (position) => {
                  const { latitude, longitude } = position.coords;
                  const address = await getAddressFromCoordinates(latitude, longitude);

                  const locationData = {
                    latitude,
                    longitude,
                    address,
                    timestamp: Date.now()
                  };

                  localStorage.setItem('userLocation', JSON.stringify(locationData));
                  localStorage.setItem('locationPermissionAsked', 'true');
                  setCurrentAddress(address);
                  alert('üìç ƒê√£ l∆∞u v·ªã tr√≠ c·ªßa b·∫°n!');
                },
                (error) => {
                  console.warn('L·ªói l·∫•y v·ªã tr√≠:', error);
                  localStorage.setItem('locationPermissionAsked', `denied:${Date.now()}`);
                },
                {
                  enableHighAccuracy: true,
                  timeout: 10000,
                  maximumAge: 0
                }
              );
            } else {
              localStorage.setItem('locationPermissionAsked', `denied:${Date.now()}`);
            }
          }, 1000);
        }
      }
    }
  }, [isLoggedIn]);


  // api l·∫•y danh s√°ch c√°c "Th·ªÉ lo·∫°i m√≥n ƒÉn".
  useEffect(() => {
    fetch('http://localhost:5001/api/categories')
      .then((res) => res.json())
      .then((data) => {
        if (data.success) {
          setCategories(data.data);
        }
      })
      .catch((err) => console.error('Fetch failed:', err))
      .finally(() => {});
  }, []);


  return (
    <div className="min-h-screen bg-gray-50">
      {/* ·∫£nh minh h·ªça + h·ªôp tho·∫°i */}
      <div className="relative h-[400px]">
        <div 
          className="absolute inset-0 opacity-60 z-0 bg-cover bg-center"
          style={{ 
            backgroundImage: `url("https://food-cms.grab.com/compressed_webp/cuisine/144/icons/Rice_e191965ccd6848a3862e6a695d05983f_1547819238893335910.webp")`,
            backgroundSize: 'cover',
            backgroundPosition: 'center',
          }}
        />

        <div className="relative z-10 h-full flex items-center">
          <div className="max-w-7xl mx-auto px-4 w-full mt-[200px]">
            <div className="bg-white rounded-2xl shadow-2xl p-8 w-full md:w-[350px]">
              <p className="text-lg md:text-xl mb-2 text-gray-700">Good Afternoon</p>
              
              <h1 className="text-4xl font-bold mb-8 text-gray-900">
                Where should we deliver your food today?
              </h1>
              
              <div className="mb-6">
                <div className="relative">
                  <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                    <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                  </div>

                  {/* 
                    ƒë·ªçc d·ªØ li·ªáu ƒë·∫ßu v√†o ·ªü thanh input
                  */}
                  <input 
                    type="text"
                    id="search-input" 
                    placeholder={isLoggedIn ? "Nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n" : "ƒêƒÉng nh·∫≠p ƒë·ªÉ t√¨m ƒë·ªãa ch·ªâ"}
                    className={`w-full pl-10 pr-12 py-4 border rounded-lg text-sm
                      ${isLoggedIn 
                        ? 'border-gray-300 cursor-text' 
                        : 'border-gray-300 bg-gray-100 text-gray-500 cursor-not-allowed'}`
                    }
                    disabled={!isLoggedIn}
                  />

                  <button 
                    onClick={fillCurrentLocation}
                    className={`absolute right-3 top-1/2 transform -translate-y-1/2 p-1 rounded-full duration-250 
                      ${isLoggedIn 
                        ? 'hover:bg-gray-100 cursor-pointer' 
                        : 'cursor-not-allowed opacity-50'}`
                    }
                    disabled={!isLoggedIn}
                    title={isLoggedIn ? 'S·ª≠ d·ª•ng v·ªã tr√≠ hi·ªán t·∫°i' : 'Vui l√≤ng ƒëƒÉng nh·∫≠p'}
                  >
                    <svg className="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
                    </svg>
                  </button>
                </div>
              </div>

              {/*
                - input n·∫øu c√≥ 1 c√°i g√¨ ƒë√≥ th√¨ t·ª± ƒë·ªông l·ªçc ra c√°c nh√† h√†ng c√≥ t√™n nh∆∞ v·∫≠y, t·∫°m 
                th·ªùi ƒëi·ªÅu h∆∞·ªõng v·ªÅ #
                - input tr·ªëng, b·∫•m t√¨m ki·∫øm th√¨ hi·ªÉn th·ªã m·ªçi nh√† h√†ng.
              */}
              <button onClick={() => {
                const input = document.getElementById('search-input') as HTMLInputElement | null;
                const query = input?.value.trim() || '';

                if (query === '') {
                  window.location.href = '/food-service/restaurants';
                } else {
                  window.location.href = `/food-service/#${encodeURIComponent(query)}`;
                }
              }}
              
              className="w-full py-4 bg-orange-500 hover:bg-orange-600 text-white rounded-lg font-semibold text-lg transition-colors mb-2 
                cursor-pointer duration-250"
              >
                T√¨m ki·∫øm nh√† h√†ng
              </button>
            </div>
          </div>
        </div>
      </div>


      {/* v·∫°ch chia section */}
      <div className='bg-gray-200 h-[2px] mt-[60px]'></div>

      {/* nh√† h√†ng */}
      <div className="py-16 max-w-[1200px] mx-auto px-4 text-center text-black bg-white mt-[80px]">
        Featured
      </div>


      {/* danh s√°ch th·ªÉ lo·∫°i m√≥n ƒÉn */}
      <div className="py-16 max-w-[1200px] mx-auto px-4 text-black bg-white mt-[80px]">
        <FoodCategories categories={categories}/>
      </div>


      {/* vƒÉn m·∫´u gi·ªõi thi·ªáu FoodDeli */}
      <div className="py-16 max-w-[1200px] mx-auto px-4 text-black bg-white mt-[80px]">
        <h1 className='text-4xl font-bold mb-12'>Ti·ªán √≠ch c·ªßa FoodDeli</h1>

        <ul className="space-y-2">
          <li className="flex items-start">
            <TiTick className="text-green-500 mt-1 mr-2" />
            <span><strong>Giao ƒë·ªì th·∫ßn t·ªëc</strong> - FoodDeli mang ƒë·∫øn d·ªãch v·ª• giao ƒë·ªì ƒÉn nhanh nh·∫•t th·ªã tr∆∞·ªùng.</span>
          </li>

          <li className="flex items-start">
            <TiTick className="text-green-500 mt-1 mr-2" />
            <span><strong>Th√¢n thi·ªán v√† ti·ªán l·ª£i ƒë·ªÉ s·ª≠ d·ª•ng</strong> - Vi·ªác ƒë·∫∑t m√≥n gi·ªù ƒë√¢y ch·ªâ c·∫ßn v√†i c√∫ nh·∫•p ho·∫∑c ch·∫°m, ƒë·ªÉ c√≥ tr·∫£i nghi·ªám nhanh ch√≥ng, ƒë·∫ßy ƒë·ªß v√† ti·ªán √≠ch.</span>
          </li>
          
          <li className="flex items-start">
            <TiTick className="text-green-500 mt-1 mr-2" />
            <span><strong>Th·ªèa m√£n m·ªçi kh·∫©u v·ªã c·ªßa ng∆∞·ªùi d√πng</strong> - T·ª´ m√≥n ƒÉn ƒë∆∞·ªùng ph·ªë ƒë·∫øn c√°c nh√† h√†ng ch·∫•t l∆∞·ª£ng nh·∫•t, ƒë√°p ·ª©ng m·ªçi kh·∫©u v·ªã t·ª´ qu√Ω kh√°ch.</span>
          </li>
          
          {/* <li className="flex items-start">
            <TiTick className="text-green-500 mt-1 mr-2" />
            <span><strong>Thanh to√°n d·ªÖ d√†ng</strong> - ƒê·∫∑t m√≥n ƒë∆°n gi·∫£n, thanh to√°n c√≤n d·ªÖ h∆°n v·ªõi GrabPay.</span>
          </li> */}
          
          <li className="flex items-start">
            <TiTick className="text-green-500 mt-1 mr-2" />
            <span><strong>H·ªá th·ªëng t√≠ch ƒëi·ªÉm th∆∞·ªüng ri√™ng</strong> - Nh·∫≠n ƒëi·ªÉm t√≠ch l≈©y cho m·ªói ƒë∆°n h√†ng v√† ƒë·ªïi l·∫•y nhi·ªÅu ph·∫ßn qu√† v√† ∆∞u ƒë√£i h·∫•p d·∫´n.</span>
          </li>
        </ul>
      </div>


      {/* ch∆∞a ƒëƒÉng nh·∫≠p th√¨ ƒëƒÉng nh·∫≠p ƒëi. c√≤n r·ªìi th√¨ b·∫•m ch·ªçn nh√† h√†ng/m√≥n ƒÉn */}
      <div className="py-16 max-w-[1200px] mx-auto px-4 text-center text-black bg-white mt-[200px]">
        {!isLoggedIn ? (
          <>
            <h2 className="text-3xl font-bold mb-6">Tr·∫£i nghi·ªám d·ªãch v·ª• h√†ng ƒë·∫ßu ch·ªâ v·ªõi m·ªôt thao t√°c ƒëƒÉng nh·∫≠p</h2>
          
            <p className="text-lg text-gray-700 mb-8">
              S·ª≠ d·ª•ng m·ªçi d·ªãch v·ª• h√†ng ƒë·∫ßu t·ª´ nh·ªØng nh√† h√†ng xu·∫•t s·∫Øc nh·∫•t t·ª´ ph√≠a ch√∫ng t√¥i v·ªõi ∆∞u ƒë√£i r·∫ª nh·∫•t
            </p>

            <Link
              href="/food-service/auth/register"
              className="inline-block px-8 py-4 bg-orange-500 text-white rounded-lg text-xl font-semibold hover:bg-orange-600"
            >
              ƒêƒÉng k√Ω mi·ªÖn ph√≠
            </Link>
          </>
        ) : (
          <>
            <h2 className="text-3xl font-bold mb-6">ƒê·∫∑t m√≥n ƒÉn ngay</h2>
          
            <p className="text-lg text-gray-700 mb-8">
              B·∫Øt ƒë·∫ßu tr·∫£i nghi·ªám d·ªãch v·ª• giao ƒë·ªì ƒÉn nhanh ch√≥ng, ti·ªán l·ª£i ngay h√¥m nay.
            </p>

            <Link
              href="/food-service/restaurants"
              className="inline-block px-8 py-4 bg-orange-500 text-white rounded-lg text-xl font-semibold hover:bg-orange-600"
            >
              Kh√°m ph√° nh√† h√†ng
            </Link>
          </>
        )}
      </div>
    </div>
  );
};

export default Home;